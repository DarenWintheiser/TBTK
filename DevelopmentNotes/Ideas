- Make Model inherit from ManyBodyContext. Update: Probably it is better to
  replace pointer by a member object instead of inheriting.

- Make the SingleParticleContext contain an IndexTree that is used to perform
  the mapping between physical and Hilbert space indices to reduce the
  responsibility of the HoppingAmplitudeTree/HoppingAmplitudeSet to that solely
  related to the HoppingAmplitudes.

- Reconsider whether WaveFunctions actually should have the functions
  getMinAbs(), getMaxAbs(), getMinArg(), and getMaxArg(). These are used by the
  RayTracer, but do not seem to have general usability. Probably the RayTracer
  should implement it's own helper functions for this, or another helper class
  should be created to provide the needed functionallity without putting the
  responsibility on the WaveFunctions.

- Remove FourierTransform functions with explicit dimensional arguments sizeX,
  sizeY, and sizeZ in favor of the single function with the ranges argument.

- The class AbstractProperty should change name and Property::Property should
  probably take over much of the non template related responsibilities of the
  current AbstractProperty class.

- Implement Event, EventHandler, and EventListener. Thought has to go into this
  to make it thread safe and possible to scale to multiple machines. This will
  among other things enable problem specific calculations to be deferred to
  application specific code. For example, the handling of tails in Matsubara
  summations.

- Add BlockStructureDescriptor to SingleParticleContext.

- The IndexTree version of PropertyExtractor::calculate() scans the
  memoryLayout for IDX_SPIN for each Index in allIndices independently of
  whether memoryLayout contains IDX_SPIN or not. This is a potential
  performance issue and it would be good if this check can be avoided if
  IDX_SPIN is not present. A possible solution may be to start the function by
  scanning memoryLayout for IDX_SPIN, and if no IDX_SPIN is found, skip the
  search of allIndices inside the main loop. However, this comes at the cost of
  this additional overhead. This overhead is likely at most as expensive
  though, and often far less expensive since allIndices generally is a bigger
  IndexTree than memoryLayout.
