- There is currently some incompatibility between nlohmann::json and CUDA. Some
  code is therefor disabled in CUDA files using the flag
  TBTK_DISABLE_NLOHMANN_JSON. This should be removed once compatibility is
  achieved or a better work around is found.

- Creating compound Indices with a single subindex per Index such as {{0}, {1}}
  results in an ambiguity for which constructor to call. This means that such
  Indices currently have to be created using the notation
  {Index({0}), Index({1})} instead. A workaround for this would be very good
  since its a notational nuisance.

- An ugly work around to get the code to compile on Mac is present in
  AbstractProperty::serialize<bool, true, false>(). The refference is first
  explicitly converted to a bool before being passed to the push_back()
  function.

- It would be good if a scheme that would enforce that PersistentObject always
  is virtually inherited and that all deriving classes would include the
  TBTK_DYNAMIC_TYPE_INFORMATION. Currently nothing is done to enforce virtual
  inheritance. That TBTK_DYNAMIC_TYPE_INFORMATION is declared in every deriving
  class is weakly enforced by checking that typeid(DataType).name() and
  DataType::getTypeidName() are equal when used in Context::create(). This
  means that any object that is ever create in the Context will be checked to
  have its class declare TBTK_DYNAMIC_TYPE_INFORMATION.
