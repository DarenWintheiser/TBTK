/* Copyright 2017 Kristofer Björnson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @package TBTKcalc
 *  @file GreensFunction.h
 *  @brief Property container for Green's function
 *
 *  @author Kristofer Björnson
 */

#ifndef COM_DAFER45_TBTK_GREENS_FUNCTION
#define COM_DAFER45_TBTK_GREENS_FUNCTION

#include "TBTKMacros.h"

#include <complex>
#include <vector>

namespace TBTK{
namespace Property{

/** Container for Green's function. */
class GreensFunction{
public:
	/** Enum class for specifying Green's function type. */
	enum class Type{
		Advanced,
		Retarded,
		Principal,
		NonPrincipal,
		FreePole
	};

	/** Enum class for specifying storage format. */
	enum class Format{
		Array,
		Poles
	};

	/** Constructor. */
	GreensFunction(
		Type type,
		Format format,
		double lowerBound,
		double upperBound,
		unsigned int resolution
	);

	/** Constructor. */
	GreensFunction(
		Type type,
		Format format,
		double lowerBound,
		double upperBound,
		unsigned int resolution,
		const std::complex<double> *data
	);

	/** Constructor. */
	GreensFunction(
		Type type,
		Format format,
		unsigned int numPoles
	);

	/** Constructor. */
	GreensFunction(
		Type type,
		Format format,
		unsigned int numPoles,
		std::complex<double> *positions,
		std::complex<double> *amplitudes
	);

	/** Copy constructor. */
	GreensFunction(const GreensFunction &greensFunction);

	/** Move constructor. */
	GreensFunction(GreensFunction &&greensFunction);

	/** Destructor. */
	~GreensFunction();

	/** Get lower bound for the energy. (For Format::ArrayFormat). */
	double getArrayLowerBound() const;

	/** Get upper bound for the energy. (For Format::ArrayFormat). */
	double getArrayUpperBound() const;

	/** Get energy resolution (number of energy intervals). (For
	 *  Format::ArrayFormat). */
	unsigned int getArrayResolution() const;

	/** Get GreensFunction data. (For Format::ArrayFormat). */
	const std::complex<double>* getArrayData() const;

	/** Get number of poles. (For Format::PoleFormat). */
	unsigned int getNumPoles() const;

	/** Get pole position. (For Format::PoleFormat). */
	std::complex<double> getPolePosition(unsigned int n) const;

	/** Get pole amplitude. (For Format::PoleFormat). */
	std::complex<double> getPoleAmplitude(unsigned int n) const;

	/** Assignment operator. */
	const GreensFunction& operator=(const GreensFunction &rhs);

	/** Move assignment operator. */
	const GreensFunction& operator=(GreensFunction &&rhs);

	/** Function call operator. */
	std::complex<double> operator()(double E) const;

	/** Function call operator. */
	std::complex<double> operator()(std::complex<double> E) const;

	/** Addition operator. (For Format::Poles). */
	GreensFunction operator+(const GreensFunction& rhs) const;

	/** Addition operator. (For Format::Poles). */
	GreensFunction operator-(const GreensFunction& rhs) const;

	/** Multiplication operator. */
	GreensFunction operator*(std::complex<double> rhs) const;

	/** Multiplication operator. */
	friend GreensFunction operator*(std::complex<double> lhs, const GreensFunction& rhs);

	/** Division operator. */
	GreensFunction operator/(std::complex<double> rhs) const;

	/** Set epsilon for use in the denominator of the Green's function.
	 *  Used when the Green's function is of type Type::Poles and format
	 *  Format::Retarded or Format::Advanced. */
	static void setEpsilon(double epsilon);
private:
	/** Green's function type. */
	Type type;

	/** Format of the Green's function. */
	Format format;

	/** Stores the Green's function as a descrete set of values on the real
	 *  axis. */
	class ArrayFormat{
	public:
		/** Lower bound for the energy. */
		double lowerBound;

		/** Upper bound for the energy. */
		double upperBound;

		/** Energy resolution. (Number of energy intervals) */
		unsigned int resolution;

		/** Actual data. */
		std::complex<double> *data;
	};

	/** Stores the Green's function as a number of poles. */
	class PoleFormat{
	public:
		/** Number of poles. */
		unsigned int numPoles;

		/** Pole positions. */
		std::complex<double> *positions;

		/** Pole amplitudes. */
		std::complex<double> *amplitudes;
	};

	/** Union of storage formats. */
	union Storage{
		ArrayFormat arrayFormat;
		PoleFormat poleFormat;
	};

	/** Actuall storage. */
	Storage storage;

	/** Default epsilon for use in the denominator of the Green's function.
	 */
	static constexpr double DEFAULT_EPSILON = 0.00001;

	/** Epsilon for use in the denominator of the Green's function. */
	static double EPSILON;
};

inline double GreensFunction::getArrayLowerBound() const{
	return storage.arrayFormat.lowerBound;
}

inline double GreensFunction::getArrayUpperBound() const{
	return storage.arrayFormat.upperBound;
}

inline unsigned int GreensFunction::getArrayResolution() const{
	return storage.arrayFormat.resolution;
}

inline const std::complex<double>* GreensFunction::getArrayData() const{
	return storage.arrayFormat.data;
}

inline unsigned int GreensFunction::getNumPoles() const{
	return storage.poleFormat.numPoles;
}

inline std::complex<double> GreensFunction::getPolePosition(
	unsigned int n
) const{
	return storage.poleFormat.positions[n];
}

inline std::complex<double> GreensFunction::getPoleAmplitude(
	unsigned int n
) const{
	return storage.poleFormat.amplitudes[n];
}

inline const GreensFunction& GreensFunction::operator=(
	const GreensFunction &rhs
){
	if(this != &rhs){
		type = rhs.type;
		format = rhs.format;
		switch(format){
		case Format::Array:
			storage.arrayFormat.lowerBound = rhs.storage.arrayFormat.lowerBound;
			storage.arrayFormat.upperBound = rhs.storage.arrayFormat.upperBound;
			storage.arrayFormat.resolution = rhs.storage.arrayFormat.resolution;
			storage.arrayFormat.data = new std::complex<double>[storage.arrayFormat.resolution];
			for(unsigned int n = 0; n < storage.arrayFormat.resolution; n++)
				storage.arrayFormat.data[n] = rhs.storage.arrayFormat.data[n];
			break;
		case Format::Poles:
			storage.poleFormat.numPoles = rhs.storage.poleFormat.numPoles;
			storage.poleFormat.positions = new std::complex<double>[storage.poleFormat.numPoles];
			storage.poleFormat.amplitudes = new std::complex<double>[storage.poleFormat.numPoles];
			for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
				storage.poleFormat.positions[n] = rhs.storage.poleFormat.positions[n];
				storage.poleFormat.amplitudes[n] = rhs.storage.poleFormat.amplitudes[n];
			}
			break;
		default:
			TBTKExit(
				"GreensFunction::operator()",
				"Unknown Green's function format.",
				"This should never happen, contact the developer."
			);
		}
	}

	return *this;
}

inline const GreensFunction& GreensFunction::operator=(
	GreensFunction &&rhs
){
	if(this != &rhs){
		type = rhs.type;
		format = rhs.format;
		switch(format){
		case Format::Array:
			storage.arrayFormat.lowerBound = rhs.storage.arrayFormat.lowerBound;
			storage.arrayFormat.upperBound = rhs.storage.arrayFormat.upperBound;
			storage.arrayFormat.resolution = rhs.storage.arrayFormat.resolution;
			storage.arrayFormat.data = rhs.storage.arrayFormat.data;
			rhs.storage.arrayFormat.data = nullptr;
			break;
		case Format::Poles:
			storage.poleFormat.numPoles = rhs.storage.poleFormat.numPoles;
			storage.poleFormat.positions = rhs.storage.poleFormat.positions;
			rhs.storage.poleFormat.positions = nullptr;
			storage.poleFormat.amplitudes = rhs.storage.poleFormat.amplitudes;
			rhs.storage.poleFormat.amplitudes = nullptr;
			break;
		default:
			TBTKExit(
				"GreensFunction::operator()",
				"Unknown Green's function format.",
				"This should never happen, contact the developer."
			);
		}
	}

	return *this;
}

inline GreensFunction GreensFunction::operator+(
	const GreensFunction& rhs
) const{
	TBTKAssert(
		format == Format::Poles && rhs.format == Format::Poles,
		"GreensFunction::operator+()",
		"Unsupported Green's function format.",
		"Only two Green's functions with format Format::Poles can be added."
	);

	if(type == rhs.type){
		Property::GreensFunction newGreensFunction(
			type,
			format,
			storage.poleFormat.numPoles + rhs.storage.poleFormat.numPoles
		);

		for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n] = storage.poleFormat.amplitudes[n];
		}

		for(unsigned int n = 0; n < rhs.storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n + storage.poleFormat.numPoles] = rhs.storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n + storage.poleFormat.numPoles] = rhs.storage.poleFormat.amplitudes[n];
		}

		return newGreensFunction;
	}
	else{
		Property::GreensFunction newGreensFunction(
			Type::FreePole,
			Format::Poles,
			storage.poleFormat.numPoles + rhs.storage.poleFormat.numPoles
		);

		double epsilon;
		double rhsEpsilon;
		switch(type){
		case Type::Retarded:
			epsilon = EPSILON;
			break;
		case Type::Advanced:
			epsilon = -EPSILON;
			break;
		case Type::FreePole:
			epsilon = 0.;
			break;
		default:
			TBTKExit(
				"GreensFunction::operator+()",
				"Unsupported Green's function type.",
				"This should never happen, contact the developer."
			);
		}
		switch(rhs.type){
		case Type::Retarded:
			rhsEpsilon = EPSILON;
			break;
		case Type::Advanced:
			rhsEpsilon = -EPSILON;
			break;
		case Type::FreePole:
			rhsEpsilon = 0.;
			break;
		default:
			TBTKExit(
				"GreensFunction::operator+()",
				"Unsupported Green's function type.",
				"This should never happen, contact the developer."
			);
		}

		std::complex<double> i(0, 1);
		for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = storage.poleFormat.positions[n] - i*epsilon;
			newGreensFunction.storage.poleFormat.amplitudes[n] = storage.poleFormat.amplitudes[n];
		}

		for(unsigned int n = 0; n < rhs.storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n + storage.poleFormat.numPoles] = rhs.storage.poleFormat.positions[n] - i*rhsEpsilon;
			newGreensFunction.storage.poleFormat.amplitudes[n + storage.poleFormat.numPoles] = rhs.storage.poleFormat.amplitudes[n];
		}

		return newGreensFunction;
	}
}

inline GreensFunction GreensFunction::operator-(
	const GreensFunction& rhs
) const{
	TBTKAssert(
		format == Format::Poles && rhs.format == Format::Poles,
		"GreensFunction::operator-()",
		"Unsupported Green's function format.",
		"Only two Green's functions with format Format::Poles can be subtracted."
	);

	if(type == rhs.type){
		Property::GreensFunction newGreensFunction(
			type,
			format,
			storage.poleFormat.numPoles + rhs.storage.poleFormat.numPoles
		);

		for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n] = storage.poleFormat.amplitudes[n];
		}

		for(unsigned int n = 0; n < rhs.storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n + storage.poleFormat.numPoles] = rhs.storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n + storage.poleFormat.numPoles] = -rhs.storage.poleFormat.amplitudes[n];
		}

		return newGreensFunction;
	}
	else{
		Property::GreensFunction newGreensFunction(
			Type::FreePole,
			Format::Poles,
			storage.poleFormat.numPoles + rhs.storage.poleFormat.numPoles
		);

		double epsilon;
		double rhsEpsilon;
		switch(type){
		case Type::Retarded:
			epsilon = EPSILON;
			break;
		case Type::Advanced:
			epsilon = -EPSILON;
			break;
		case Type::FreePole:
			epsilon = 0.;
			break;
		default:
			TBTKExit(
				"GreensFunction::operator-()",
				"Unsupported Green's function type.",
				"This should never happen, contact the developer."
			);
		}
		switch(rhs.type){
		case Type::Retarded:
			rhsEpsilon = EPSILON;
			break;
		case Type::Advanced:
			rhsEpsilon = -EPSILON;
			break;
		case Type::FreePole:
			rhsEpsilon = 0.;
			break;
		default:
			TBTKExit(
				"GreensFunction::operator-()",
				"Unsupported Green's function type.",
				"This should never happen, contact the developer."
			);
		}

		std::complex<double> i(0, 1);
		for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = storage.poleFormat.positions[n] - i*epsilon;
			newGreensFunction.storage.poleFormat.amplitudes[n] = storage.poleFormat.amplitudes[n];
		}

		for(unsigned int n = 0; n < rhs.storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n + storage.poleFormat.numPoles] = rhs.storage.poleFormat.positions[n] - i*rhsEpsilon;
			newGreensFunction.storage.poleFormat.amplitudes[n + storage.poleFormat.numPoles] = -rhs.storage.poleFormat.amplitudes[n];
		}

		return newGreensFunction;
	}
}

inline GreensFunction GreensFunction::operator*(
	std::complex<double> rhs
) const{
	switch(format){
	case Format::Array:
	{
		GreensFunction newGreensFunction(
			type,
			format,
			storage.arrayFormat.lowerBound,
			storage.arrayFormat.upperBound,
			storage.arrayFormat.resolution
		);

		for(unsigned int n = 0; n < storage.arrayFormat.resolution; n++)
			newGreensFunction.storage.arrayFormat.data[n] = rhs*storage.arrayFormat.data[n];

		return newGreensFunction;
	}
	case Format::Poles:
	{
		GreensFunction newGreensFunction(
			type,
			format,
			storage.poleFormat.numPoles
		);

		for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n] = rhs*storage.poleFormat.amplitudes[n];
		}

		return newGreensFunction;
	}
	default:
		TBTKExit(
			"GreensFunction::operator*()",
			"Unknown Green's function format.",
			"This should never happen, contact the developer."
		);
	}
}

inline GreensFunction operator*(
	std::complex<double> lhs,
	const GreensFunction &rhs
){
	switch(rhs.format){
	case GreensFunction::Format::Array:
	{
		GreensFunction newGreensFunction(
			rhs.type,
			rhs.format,
			rhs.storage.arrayFormat.lowerBound,
			rhs.storage.arrayFormat.upperBound,
			rhs.storage.arrayFormat.resolution
		);

		for(unsigned int n = 0; n < rhs.storage.arrayFormat.resolution; n++)
			newGreensFunction.storage.arrayFormat.data[n] = lhs*rhs.storage.arrayFormat.data[n];

		return newGreensFunction;
	}
	case GreensFunction::Format::Poles:
	{
		GreensFunction newGreensFunction(
			rhs.type,
			rhs.format,
			rhs.storage.poleFormat.numPoles
		);

		for(unsigned int n = 0; n < rhs.storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = rhs.storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n] = lhs*rhs.storage.poleFormat.amplitudes[n];
		}

		return newGreensFunction;
	}
	default:
		TBTKExit(
			"GreensFunction::operator*()",
			"Unknown Green's function format.",
			"This should never happen, contact the developer."
		);
	}
}

inline GreensFunction GreensFunction::operator/(
	std::complex<double> rhs
) const{
	switch(format){
	case Format::Array:
	{
		GreensFunction newGreensFunction(
			type,
			format,
			storage.arrayFormat.lowerBound,
			storage.arrayFormat.upperBound,
			storage.arrayFormat.resolution
		);

		for(unsigned int n = 0; n < storage.arrayFormat.resolution; n++)
			newGreensFunction.storage.arrayFormat.data[n] = storage.arrayFormat.data[n]/rhs;

		return newGreensFunction;
	}
	case Format::Poles:
	{
		GreensFunction newGreensFunction(
			type,
			format,
			storage.poleFormat.numPoles
		);

		for(unsigned int n = 0; n < storage.poleFormat.numPoles; n++){
			newGreensFunction.storage.poleFormat.positions[n] = storage.poleFormat.positions[n];
			newGreensFunction.storage.poleFormat.amplitudes[n] = storage.poleFormat.amplitudes[n]/rhs;
		}

		return newGreensFunction;
	}
	default:
		TBTKExit(
			"GreensFunction::operator*()",
			"Unknown Green's function format.",
			"This should never happen, contact the developer."
		);
	}
}

inline void GreensFunction::setEpsilon(double epsilon){
	EPSILON = epsilon;
}

};	//End namespace Property
};	//End namespace TBTK

#endif
